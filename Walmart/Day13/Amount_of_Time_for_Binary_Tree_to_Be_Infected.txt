class Solution {
    private:
    TreeNode* startNode = NULL;
    void getMap(TreeNode* root, unordered_map<TreeNode*, TreeNode*>& umap, int start){
        if(!root) return;
        if(root->val==start)startNode=root;
        if(root-> right) umap[root->right]=root;
        if(root->left) umap[root->left]=root;
        getMap(root->right, umap, start);
        getMap(root->left, umap, start);
    }

    int letItBurn(TreeNode* root,unordered_map<TreeNode*, TreeNode*>& umap){
        if(!root) return 0;
        unordered_set<TreeNode*> uset;
        queue<TreeNode*> q;
        q.push(startNode);
        uset.insert(startNode);
        int time = 0;
        while(!q.empty()){
            int size = q.size();
            for(int i = 0; i < size; i++){
                TreeNode* node = q.front();
                q.pop();
                if(node->left&&!uset.count(node->left)){
                    q.push(node->left);
                    uset.insert(node->left);
                }
                if(node->right&&!uset.count(node->right)){
                    q.push(node->right);
                    uset.insert(node->right);
                }
                if(umap[node]&&!uset.count(umap[node])){
                    q.push(umap[node]);
                    uset.insert(umap[node]);
                }
            }
            time++;
        }
        return time-1;
    }
public:
    int amountOfTime(TreeNode* root, int start) {
        //map root =NULL
        unordered_map<TreeNode*, TreeNode*> umap;
        umap[root]=NULL;
        getMap(root, umap, start);
        return letItBurn(root, umap);
    }
};
