class Solution {
    private:
    static bool cmp(vector<int>a, vector<int> b){
        if(a[0]==b[0]){
            return a[1]>b[1];
        }
        return a[0]<b[0];
    }

    int lis(vector<int>& nums){
        if(nums.size()==0) return 1;
        int n = nums.size();
        vector<int> arr;
        for(int i = 0; i < nums.size(); i++){
            if(arr.empty()||arr.back() < nums[i]) arr.push_back(nums[i]);
            else{
                int idx = lower_bound(arr.begin(), arr.end(), nums[i])-arr.begin();
                arr[idx]=nums[i];
            }
        }
        return arr.size();
    }

public:
    int maxEnvelopes(vector<vector<int>>& envelopes) {
        sort(envelopes.begin(), envelopes.end(), cmp);
        vector<int> nums;
        for(auto env: envelopes){
            nums.push_back(env[1]);
        }
        return lis(nums);
    }
};
