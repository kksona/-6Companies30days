class Solution {
    private:
    bool isValid(int row, int col, int R, int C){
        if(row>=0&&row<R&&col>=0&&col<C) return true;
        return false;
    }

    bool allRotten(vector<vector<int>>& grid){
        for(int i = 0; i < grid.size(); i++){
            for(int j = 0; j < grid[i].size(); j++){
                if(grid[i][j]==1)return false;
            }
        }
        return true;
    }

public:
    int orangesRotting(vector<vector<int>>& grid) {
        if(grid.size()==0)return -1;
        int R = grid.size();
        int C = grid[0].size();
        queue<pair<int,int>> q;
        for(int i = 0; i < R; i++){
            for(int j = 0; j < C; j++){
                if(grid[i][j]==2){
                    q.push({i,j});
                }
            }
        }
        int time=-1;
        while(!q.empty()){
            int size = q.size();
            for(int i = 0; i < size; i++){
                int row = q.front().first;
                int col = q.front().second;
                q.pop();
                int dx[]={0,0,1,-1};
                int dy[]={1,-1,0,0};
                for(int i = 0; i < 4; i++){
                    int adj_row = row + dx[i];
                    int adj_col = col + dy[i];
                    if(isValid(adj_row, adj_col, R, C)&&grid[adj_row][adj_col]==1){
                        
                        q.push({adj_row, adj_col});
                        grid[adj_row][adj_col]=2;
                    }
                }
            }
            time++;
        }
        if(allRotten(grid)) return time==-1?0:time;
        return -1;
    }
};
