class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string s = "";
        if(!root) return s;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            TreeNode* node = q.front();
            q.pop();
            if(!node){
                s += "#,";
                continue;
            }
            s += to_string(node->val) + ",";
            q.push(node->left);
            q.push(node->right);
        }
        //cout << s;
        return s;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        TreeNode* root=NULL;
        if(data.empty()) return root;
        stringstream s(data);
        string str;
        getline(s, str, ',');
        root = new TreeNode(stoi(str));
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            TreeNode* node = q.front();
            q.pop();
            getline(s, str, ',');
            if(str=="#")node->left=NULL;
            else node -> left = new TreeNode(stoi(str));
            if(node->left)q.push(node->left);
            getline(s, str, ',');
            if(str=="#")node->right=NULL;
            else node -> right = new TreeNode(stoi(str));
            if(node->right)q.push(node -> right);
        }
        return root;
    }
};
