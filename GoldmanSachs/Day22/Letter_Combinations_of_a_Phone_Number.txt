class Solution {
    private:
    void dfs(string& digits, int idx, string& s, vector<string>& ans, unordered_map<int, string>& umap){
        if(idx==digits.size()){
            ans.push_back(s);
            return;
        }
        for(char ch: umap[digits[idx]-'0']){
            s += ch;
            dfs(digits,idx+1,s,ans,umap);
            s.pop_back();
        }
    }
public:
    vector<string> letterCombinations(string digits) {
        vector<string> ans;
        if(digits.length() == 0){
            return ans;
        }
        unordered_map<int, string> umap;
        umap[2] = "abc";
        umap[3] = "def";
        umap[4] = "ghi";
        umap[5] = "jkl";
        umap[6] = "mno";
        umap[7] = "pqrs";
        umap[8] = "tuv";
        umap[9] = "wxyz";
        string s ="";
        dfs(digits,0,s,ans,umap);
        return ans;
    }
};
