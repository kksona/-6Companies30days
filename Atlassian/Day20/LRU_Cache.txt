class LRUCache {
public:
    class node{
        public:
        int key;
        int val;
        node* next;
        node* prev;
        node(int k, int v){
            key = k;
            val = v;
        }
    };
    node* head = new node(-1,-1);
    node* tail = new node(-1,-1);
    map<int, node*> mp;
    int cap;

    void addNode(node* newNode){
        node* temp = head -> next;
        newNode -> next = temp;
        temp -> prev = newNode;
        newNode -> prev = head;
        head -> next = newNode;
    }

    void deleteNode(node* delNode){
        delNode -> next -> prev = delNode -> prev;
        delNode -> prev -> next = delNode -> next;
    }

    LRUCache(int capacity) {
        this -> cap = capacity;
        head -> next = tail;
        tail -> prev = head;
    }
    
    int get(int key) {
        if(mp.find(key) != mp.end()){
            //we found the key
            node* resNode = mp[key];
            int res = resNode -> val;
            //delete from hashmap and DLL
            mp.erase(key);
            deleteNode(resNode);
            //add fresh values again in map and DLL
            addNode(resNode);
            mp[key] = head -> next;
            return res;
        }
        return -1;
    }
    
    void put(int key, int value) {
        if(mp.find(key) != mp.end()){
            node* existing = mp[key];
            deleteNode(existing);
            mp.erase(key);
        }
        if(mp.size() == cap){
            node* delNode = tail -> prev;
            deleteNode(delNode);
            mp.erase(delNode -> key);
        }
        node* newNode = new node(key, value);
        addNode(newNode);
        mp[key] = newNode;
    }
};
