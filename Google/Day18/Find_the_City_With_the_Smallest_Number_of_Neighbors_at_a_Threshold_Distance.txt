class Solution {
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        vector<vector<int>> dist(n, vector<int>(n, INT_MAX));
        for(const auto& p : edges){
            int u = p[0];
            int v = p[1];
            int w = p[2];
            dist[u][v]=w;
            dist[v][u]=w;
        }
        //all pair shortest path
        for(int k = 0; k < n; k++){
            for(int j = 0; j < n; j++){
                for(int i = 0; i < n; i++){
                    if(i!=j){
                        if(dist[i][k]!=INT_MAX&&dist[k][j]!=INT_MAX){
                            dist[i][j]=min(dist[i][j], dist[i][k]+dist[k][j]);
                        }
                    }
                }
            }
        }
        int ans = -1, mini=INT_MAX;
        for(int node = 0; node < n; node++){
            int cnt=0;
            for(int adj_node = 0; adj_node<n; adj_node++){
                if(node!=adj_node&&dist[node][adj_node]<=distanceThreshold){
                    cnt++;
                }
            }
            if(cnt<=mini){
                mini=cnt;
                ans=node;
            }
        }
        return ans;
    }
};
