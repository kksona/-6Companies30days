class Solution {
    private:
    ListNode* merge(ListNode* head1, ListNode* head2){
        if(!head1) return head2;
        if(!head2) return head1;
        ListNode* p = head1, *q=head2, *dummy = new ListNode(-1), *k=dummy;
        while(p&&q){
            if(p->val<=q->val){
                k->next=p;
                p=p->next;
            }else{
                k->next=q;
                q=q->next;
            }
            k=k->next;
        }
        if(p)k->next=p;
        if(q)k->next=q;
        return dummy->next;
    }

    ListNode* helper(int left, int right, vector<ListNode*>& lists){
        if(left>right) return NULL;
        if(left==right) return lists[left];
        int mid = left + (right-left)/2;
        ListNode* leftMerged = helper(left,mid,lists);
        ListNode* rightMerged = helper(mid+1,right,lists);
        return merge(leftMerged,rightMerged);
    }

public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size()==0) return NULL;
        if(lists.size()==1) return lists[0];
        int n = lists.size();
        return helper(0,n-1,lists);
    }
};
